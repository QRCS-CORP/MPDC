

MPDC Example Configration
Login to the RDS, and go through the setup steps, starting with the enable command.
Select a user name, password, device name, ip address and network name.
Go to config mode, then certificate mode, and generate a root certificate: generate(days-valid).
Login to the DLA, and go through the setup steps, starting with the enable command.
When prompted, supply the path to the root certificate generated by the RDS.
Go to certificate mode, and generate the DLA certificate.
On the RDS, in certificate mode, sign the DLA's certificate: sign(certificate-path).
Copy the certificate back to the DLA, either manually (requires server restart), or by using the import command in certificate mode.
Repeat these steps for each Agent, application server (MAS), and client in the network.
On the DLA, go to server mode, and enable the ip service: service start.
On each Agent, go to server mode, enable the ip service, and register with the DLA: register(dla-ip-address).
Repeat these steps on each MAS, and then every Client, enabling the ip service, and registering with the DLA.
The MPDC network is now synchronized and ready to use.
From server mode on a client, call connect to connect to a server: connect(mas-ip-address).
This will establish an encrypted tunnel between the MAS and the Client, that echoes back any client-sent data.



































Project notes, expansion ideas, and internal dialog.

What if the client had its own certificate?

Clients have their certificate signed by the DLA during a client join.
The DLA stores certificates for every network device in its 'area'.
A DLA area is a subnet range of logical IP addresses.
DLAs would need a forwarding map, to connect clients to the correct DLA area and service.
DLAs would have to maintain a sychronized database of client id-to-address mappings
to the DLA managing that clients certificate.
The DLAs maintain a synchronized database of client id to DLA area address: n={id, dadd},
using an inter-DLA messaging protocol.

advantages
Intranet servers could verify messaging as sent from a signed network source.
Could enable two-way key transfers (512-bit duplexed mode).

disadvantages
DLAs would need to act as certificate stores.
More complex protocol interactions, two-way kex, certificate lookups and storage.
Significant amount of new messaging and protocol additions.


Hash table
Build a table that is a set of lookup-key and data pairings. The node-id is the request query,
the data is the network address. Use intrinsics to compare the request id to the table members in an index lookup.
Use a sorting function to sort the table (q-sort?).
Consider reducing the hash key to a smaller integer, 32-bit, and vectorize the lookups, ex. k{} = ka,kb,kc,kd, r{} = ra,rb,rc,rd; kn=q ? rn=q{kn,d} : rn=null

Networking the Root Domain Security server
In a larger network, in some instances it may be more practical to network the RDS server.
This is not the best security configuration; a server that is non-networked can be used, removing it from most attack vectors.
However, in some instances this may be required, and in those cases, the RDS should be in a secure VLan, 
physically and virtually unable to connect to devices on exterior networks. In this case, consider adding an option that allows
the RDS to respond to certificate queries. The message scope should be limited to the transmission of the public certificate on request.
The RDS certificate should also have the X.509 field, that it can be verified in the PKI.